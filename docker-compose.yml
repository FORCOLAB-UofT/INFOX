version: "3.4"

services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.api
    image: react-flask-app-api
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    image: react-flask-app-client
    ports:
      - "3000:3000"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"

  redis:
    env_file:
      - ".env"
    image: "redis:5.0.4-stretch"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    volumes:
      - "redis:/data"
    expose:
      - '6379'
    ports:
      - '6379:6379'

  # web:
  #   build:
  #     dockerfile: Dockerfile.api
  #     context: "."
  #     args:
  #       - "FLASK_ENV=${FLASK_ENV:-production}"
  #   depends_on:
  #     - "redis"
  #   env_file:
  #     - ".env"
  #   healthcheck:
  #     test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:5000/healthy}"
  #     interval: "60s"
  #     timeout: "3s"
  #     start_period: "5s"
  #     retries: 3
  #   ports:
  #     - "${DOCKER_WEB_PORT:-127.0.0.1:5000}:5000"
  #   restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  #   stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
  #   volumes:
  #     - "${DOCKER_WEB_VOLUME:-./public:/app/public}"

  worker:
    build:
      dockerfile: Dockerfile.api
      context: "."
      args:
        - "FLASK_ENV=${FLASK_ENV:-production}"
    command: celery -A celery_worker.celery worker 
    depends_on:
      - "redis"
    env_file:
      - ".env"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    volumes:
      - "${DOCKER_WEB_VOLUME:-./public:/app/public}"
    links:
      - redis

volumes:
  redis: {}